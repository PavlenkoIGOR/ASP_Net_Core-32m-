В пустой проект было добавлено:﻿
************

Для серьезных проектов предусматривают до 4‑х вариантов окружения (среды):

        Development — разработческое, при котором происходит программирование и отладка проекта, как правило, используются тестовые данные. Так происходит, к примеру, когда вы запускаете проект из Visual Studio.
        Testing — тестовое, при котором проект размещается на так называемом «тестовом стенде» — сервере с ненастоящими данными для первичной отладки.
        Staging — размещение объекта на сервере с конфигурацией и данными, максимально приближенными к реальным, для финального тестирования.
        Production — так называемая «боевая» среда. Приложение размещается на реальном сервере для взаимодействия с реальными пользователями.
        Название конфигурации укзывается в launchSettings.json в строках ["ASPNETCORE_ENVIRONMENT": "Development"]
При добавлении окружения создается JSON-файл (пример: при добавлении Staging (appsettings.Staging.json и т.п.) - в Startup.sc в условие запуска проекта добавилось || env.IsStaging(): 

if (env.IsDevelopment() || env.IsStaging()){}
и был создан файл "appSettings.Staging.json".

*************

Добавлена папка "MiddleWares".
Добавлен класс "LoggingMiddleware". Через него будут отслеживаться все переходы пользователя по страницам нашего приложения.

*************

Добавлен    app.UseEndpoints(endpoints =>
            {
                endpoints.MapGet("/config", async context =>
                {
                    await context.Response.WriteAsync($"/Config:\n App name: {env.ApplicationName}. App running configuration: {env.EnvironmentName}");
                });
            });
Добавлен    app.Run(async (context) =>
            {
                await context.Response.WriteAsync($"Welcome to the {env.ApplicationName}!");
            });

Добавлен    компонент для логирования запросов с использованием метода Use (просто полезная фича).
            app.Use(async (context, next) =>
            {
                // Для логирования данных о запросе используем свойства объекта HttpContext
            Console.WriteLine($"[{DateTime.Now}]: New request to http://{context.Request.Host.Value + context.Request.Path}");
            await next.Invoke();
            });

Добавлен    поле и необязательный конструктор
            static IWebHostEnvironment _env;
            public Startup(IWebHostEnvironment env)
            {
                _env = env;
            }

Добавлен    About(); метод для обработки страницы "Про ..."

Добавлен    пустой файлик .gitkeep (см. ниже);

Добавлена   папка "MiddleWares" c классом LoggingMiddleware.cs (из Startup убран метод для записи логов в отдельный файл и помещен в класс LoggingMiddleware).
            В класс Startup дописана строка app.UseMiddleware<LoggingMiddleware>();

            строка "webBuilder.UseWebRoot("Views");" в метод IHostBuilder CreateHostBuilder();

Добавлена   папка Views со стартовой страницей Index.html

Добавлена   папка "wwwroot". В класс Startup дописана строка подключения Static-файлов: app.UseStaticFiles();
            После этого страницу Index.html можно открыть прописав после начального адреса: "/index.html".

Добавлена   папка "Models". Класс "UserInfo.cs", который будет хранить данные о пользователе, который подключился.

Добавлен    nuget-пакет "Entity Framework Core" и "microsoft.entityframeworkcore.sqlserver".

Добавлена   строка подключения ["ConnectionStrings": {"DefaultConnection": "Server=localhost\SQLEXPRESS;Database=master1;Trusted_Connection=True;"
            },] в файл appSettings.Development.json.
            В Production-окружении мы бы использовали для этого appSettings.json.

Добавлен    класс "AppContext.cs". В класс "Startup.cs" добавлен "public IConfiguration iConfig;". В метод "ConfigureServices()" класса "Startup.cs" добавлены строки [string connection = iConfig.GetConnectionString("DefaultConnection");
            services.AddDbContext<MyAppContext>(option => option.UseSqlServer(connection));]

Добавлена   папка "Repository".

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Следует соблюдать последовательность методов в методе Configure();.

Метод Run() — это самый простой способ добавления компонента Middleware (которые мы рассмотрели в юните 5) — в конвейер.
                Важно помнить, что компонент, добавленный таким образом, препятствует передаче запроса далее по конвейеру, то есть
                обработка на нём прекратится (надо его писать последним).

Метод Use() — этот метод тоже позволяет добавить компоненты Middleware в конвейер, но приводит к вызову следующего компонента.

Метод Map() - (а также методы-расширения, начинающиеся с этого слова) сопоставляют путь запроса с делегатом — обработчиком.

*************

В вашем проекте теперь пишутся логи, и Git ими засорять, конечно, не стоит. Для этого можно добавить RequestLog.txt в файл .gitignore.
А можно добавить в папку Logs небольшой пустой файлик .gitkeep, чтобы сама папка Logs в Git попала, но без содержимого.

Репозитории необходимо регестрировать в "ConfigureServices()".